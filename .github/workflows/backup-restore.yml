# .github/workflows/backup-restore.yml
name: Backup & Restore TrustPoint

on:
  workflow_call:
    inputs:
      artifact_name:
        description: 'Base name for the backup (".dump.gz" will be appended)'
        required: false
        type: string
        default: 'from_outside'

jobs:
  backup-and-restore:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build and start database
        run: |
          docker build -t trustpointproject/postgres:latest -f docker/db/Dockerfile .
          docker run -d --name postgres -p 5432:5432 -e POSTGRES_USER=admin   -e POSTGRES_PASSWORD=testing321   -e POSTGRES_DB=trustpoint_db   trustpointproject/postgres:latest

      - name: Setup uv environment
        uses: ./.github/actions/setup-uv-action

      - name: Apply migrations (in-container)
        run: 
          uv run trustpoint/manage.py migrate --noinput

      - name: Fill DB with test data
        run: |
          uv run trustpoint/manage.py add_domains_and_devices
          uv run trustpoint/manage.py tls_cred

      - name: Build and start trustpoint container
        run: |
          docker build -t trustpointproject/trustpoint:latest -f docker/trustpoint/Dockerfile .
          docker run -d --name trustpoint --link postgres -p80:80 -p443:443 -ePOSTGRES_DB=trustpoint_db -eDATABASE_USER=admin -eDATABASE_PASSWORD=testing321 -eDATABASE_HOST=postgres -eDATABASE_PORT=5432 trustpointproject/trustpoint:latest
      
      - name: Wait for HTTP service
        run: |
          for i in {1..30}; do
            if curl --fail -s http://localhost/; then
              echo "Service is up"; exit 0
            fi
            echo "Waiting for service…"; sleep 2
          done
          echo "Service never became ready" >&2
          exit 1

      - name: Create backup (in-container)
        run: docker exec trustpoint sh -c "uv run trustpoint/manage.py trustpointbackup --filename from_outside"

      - name: Download backup
        run: docker cp trustpoint:/var/www/html/trustpoint/trustpoint/media/backups/from_outside.dump.gz .

      - name: Stop & remove old container
        run: docker rm -f trustpoint

      - name: Reset old DB
        run: uv run trustpoint/manage.py reset_db --force --no-user 

      - name: Start fresh TrustPoint container
        run: docker run -d --name trustpoint --link postgres -p80:80 -p443:443 -ePOSTGRES_DB=trustpoint_db -eDATABASE_USER=admin -eDATABASE_PASSWORD=testing321 -eDATABASE_HOST=postgres -eDATABASE_PORT=5432 trustpointproject/trustpoint:latest

      - name: Upload backup to new trustpoint container
        run: docker cp from_outside.dump.gz trustpoint:/var/www/html/trustpoint/trustpoint/media/backups/

      - name: Restore DB
        run: docker exec trustpoint sh -c "uv run trustpoint/manage.py dbrestore  -z --noinput -I trustpoint/media/backups/from_outside.dump.gz"

      - name: Restore trustpoint
        run: uv run trustpoint/manage.py trustpointrestore

      - name: Wait for HTTP service
        run: |
          for i in {1..30}; do
            if curl --fail -s http://localhost/; then
              echo "Service is up"; exit 0
            fi
            echo "Waiting for service…"; sleep 2
          done
          echo "Service never became ready" >&2
          exit 1
