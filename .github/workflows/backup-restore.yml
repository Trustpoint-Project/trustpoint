# .github/workflows/backup-restore.yml
name: Backup & Restore TrustPoint

on:
  workflow_call:
    inputs:
      artifact_name:
        description: 'Base name for the backup (".dump.gz" is appended automatically)'
        required: false
        type: string
        default: 'from_outside'

jobs:
  backup-and-restore:
    runs-on: ubuntu-latest

    steps:
      - name: Install gettext tools
        run: |
          sudo apt-get update
          sudo apt-get install -y gettext

      - name: Check out repository
        uses: actions/checkout@v4

      - name: Build PostgreSQL image
        run: |
          docker build \
            -t trustpointproject/postgres:latest \
            -f docker/db/Dockerfile .

      - name: Start PostgreSQL container
        run: |
          docker run -d \
            --name postgres \
            -p 5432:5432 \
            -e POSTGRES_USER=admin \
            -e POSTGRES_PASSWORD=testing321 \
            -e POSTGRES_DB=trustpoint_db \
            trustpointproject/postgres:latest

      - name: Set up uv environment
        uses: ./.github/actions/setup-uv-action

      - name: Initialize TrustPoint schema & version
        run: uv run trustpoint/manage.py inittrustpoint

      - name: Seed database with test data
        run: |
          uv run trustpoint/manage.py add_domains_and_devices
          uv run trustpoint/manage.py tls_cred

      - name: Build TrustPoint image
        run: |
          docker build \
            -t trustpointproject/trustpoint:latest \
            -f docker/trustpoint/Dockerfile .

      - name: Start TrustPoint container
        run: |
          docker run -d \
            --name trustpoint \
            --link postgres \
            -p 80:80 \
            -p 443:443 \
            -e POSTGRES_DB=trustpoint_db \
            -e DATABASE_USER=admin \
            -e DATABASE_PASSWORD=testing321 \
            -e DATABASE_HOST=postgres \
            -e DATABASE_PORT=5432 \
            trustpointproject/trustpoint:latest

      - name: Validate initial deployment
        run: ./tests/scripts/test_successful_restoration.sh

      - name: Create backup inside container
        run: |
          docker exec trustpoint \
            uv run trustpoint/manage.py trustpointbackup \
              --filename "${{ inputs.artifact_name }}"

      - name: Download backup artifact
        run: |
          docker cp \
            trustpoint:/var/www/html/trustpoint/trustpoint/media/backups/${{ inputs.artifact_name }}.dump.gz \
            .

      - name: Tear down TrustPoint container
        run: docker rm -f trustpoint

      - name: Reset database
        run: uv run trustpoint/manage.py reset_db --force --no-user

      - name: Restart TrustPoint container
        run: |
          docker run -d \
            --name trustpoint \
            --link postgres \
            -p 80:80 \
            -p 443:443 \
            -e POSTGRES_DB=trustpoint_db \
            -e DATABASE_USER=admin \
            -e DATABASE_PASSWORD=testing321 \
            -e DATABASE_HOST=postgres \
            -e DATABASE_PORT=5432 \
            trustpointproject/trustpoint:latest

      - name: Upload backup to container
        run: |
          docker cp \
            ${{ inputs.artifact_name }}.dump.gz \
            trustpoint:/var/www/html/trustpoint/trustpoint/media/backups/

      - name: Restore database inside container
        run: |
          docker exec trustpoint \
            uv run trustpoint/manage.py dbrestore \
              -z --noinput \
              -I /var/www/html/trustpoint/trustpoint/media/backups/${{ inputs.artifact_name }}.dump.gz

      - name: Restore TrustPoint inside container
        run: |
          docker exec trustpoint \
            uv run trustpoint/manage.py trustpointrestore

      - name: Validate post-restore
        run: ./tests/scripts/test_successful_restoration.sh
