name: Pytest

# Trigger this workflow on pull requests to ensure tests are executed before merging.
on: [pull_request]

jobs:
  setup:
    uses: ./.github/workflows/setup-env.yml  # Call the reusable setup workflow.
    with:
      run_migrations: true  # Enable database migrations.

  pytest:
    needs: setup  # Ensures setup runs first.
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner for compatibility and performance.

    permissions:
      contents: read  # Grants read access to repository contents.
      pull-requests: write  # Allows posting test reports as comments on pull requests.

    steps:
      - name: Run Pytest and create reports
        run: |
          mkdir -p reports
          uv run pytest \
          --md-report-flavor gfm \
          --html=reports/pytest-report.html \
          --junitxml=reports/junit-report.xml \
          trustpoint/ 

      - name: Display Summary in GitHub Actions even if tests fail
        if: always()  # Ensures this step runs even if pytest fails.
        run: |
          echo "<details><summary>Pytest Report</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat "md-report.md" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY

      - name: Upload Test Reports even if tests fail
        uses: actions/upload-artifact@v4  # Uploads reports for review.
        if: always()  # Ensures this step runs even if pytest fails.
        with:
          name: pytest-reports
          path: reports/

      - name: Render the report to the PR when tests fail
        uses: marocchino/sticky-pull-request-comment@v2  # Posts test results as a comment on PRs.
        if: failure()  # Only runs if tests fail.
        with:
          header: test-report
          recreate: true  # Replaces previous test reports to keep PR comments clean.
          path: md-report.md  # Posts the markdown test report in the PR.
